package main

import (
	"fmt"
	"sync"
)

/*
Кажется, что результат выполнения работы программы ниже будет 1000,
но так почти никогда не будет. Почему так? Представим себе что
первая горутина получает значение переменной x, а вторая горутина
одновременно с этим выполняют такую же операцию. Тогда обе горутины
считают, что x = 0, затем производятся расчеты и обе горутины
присваивают x значение 1 (0 + 1), в результате работа одной из горутин
напрасна.
*/

func test1() {
	var x int
	wg := new(sync.WaitGroup)

	for i := 0; i < 1000; i++ {
		// Запускаем 1000 экземпляров горутины, увеличивающей счетчик на 1
		wg.Add(1)
		go func(wg *sync.WaitGroup) {
			defer wg.Done()
			x++
		}(wg)
	}

	wg.Wait()

	// По идее значение счетчика должно быть 1000, но крайне вероятно, что этого не произойдет
	fmt.Println("Test 1 without Mutex:", x)
}

/*
Чтобы не потерять результаты вычислений мы можем использовать
тип sync.Mutex.
Мютекс имеет методы Lock и Unlock - причем Lock невозможно
выполнить подряд дважды, если между этими вызовами не выполнить
Unlock. Соответственно если одна горутина взяла Lock, то другие
горутины этой операции выполнить уже не могут и вынуждены
ожидать, пока взявшая Lock горутина не выполнит Unlock.
*/

func test2() {
	var x int
	wg := new(sync.WaitGroup)
	mu := new(sync.Mutex)

	for i := 0; i < 1000; i++ {
		// Запускаем 1000 экземпляров горутины, увеличивающей счетчик на 1
		wg.Add(1)
		go func(wg *sync.WaitGroup, mu *sync.Mutex) {
			defer wg.Done()
			mu.Lock()
			x++
			mu.Unlock()
		}(wg, mu)
	}

	wg.Wait()
	fmt.Println("Test 2 with Mutex:", x)
}

func main() {
	test1()
	test2()
}
