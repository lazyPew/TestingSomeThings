package main

import (
	"fmt"
	"time"
)

/*
type Timer

Timer по своей сути очень похож на результат работы After,
но позволяет остановить таймер или изменить время его выполнения:
	t := time.NewTimer(time.Second) // создаем новый таймер, который сработает через 1 секунду
	go func() {
		<-t.C // C - канал, который должен вернуть значение через заданное время
	}()
	t.Stop() // но мы можем остановить таймер и раньше установленного времени
	t.Reset(time.Second * 2) // пока таймер не сработал, мы можем сбросить его, установив новый срок выполнения
	<-t.C

type Ticker

Ticker же работает как функция Tick, но может быть остановлен:
	func NewTicker(d Duration) *Ticker // создаем новый Ticker
	func (t *Ticker) Stop() // останавливаем Ticker
*/

/*
В примере таймер использован для передачи сигнала о необходимости
завершить работу, а тикер выдавал «билет» на выполнение работы.
Такой подход обычно используется для балансировки нагрузки.
*/

func main() {
	<-work()
	/*
	 * тик-так
	 * тик-так
	 * тик-так
	 * тик-так
	 */
}

func work() <-chan struct{} {
	done := make(chan struct{}) // канал для синхронизации горутин

	go func() {
		defer close(done) // синхронизирующий канал будет закрыт, когда функция завершит свою работу

		stop := time.NewTimer(time.Second)

		tick := time.NewTicker(time.Millisecond * 200)
		defer tick.Stop() // освободим ресурсы, при завершении работы функции

		for {
			select {
			case <-stop.C:
				// stop - Timer, который через 1 секунду даст сигнал завершить работу
				return
			case <-tick.C:
				// tick - Ticker, посылающий сигнал выполнить работу каждый 200 миллисекунд
				fmt.Println("тик-так")
			}
		}
	}()

	return done
}
